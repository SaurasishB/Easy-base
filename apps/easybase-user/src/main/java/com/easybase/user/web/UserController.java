package com.easybase.user.web;

import com.easybase.user.service.UserService;
import com.easybase.user.web.dto.UserRequestDTO;
import com.easybase.user.web.dto.UserResponseDTO;

import com.easybase.common.exception.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import java.net.URI;
import java.util.UUID;
import java.time.Instant;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import com.easybase.department.model.Department;

/**
 * REST Controller for User operations.
 * Generated by EasyBase Code Generator.
 */
@RestController
@RequestMapping("/api/eb_user")
public class UserController {

    private final UserService service;

    @Autowired
    public UserController(UserService service) {
        this.service = service;
    }

    /**
     * Creates a new User.
     *
     * @param requestDTO The data for the new entity
     * @return The created entity
     */
    @PostMapping
    public ResponseEntity<UserResponseDTO> create(@Valid @RequestBody UserRequestDTO requestDTO) {
        UserResponseDTO createdEntity = service.create(requestDTO);
        return ResponseEntity
                .created(URI.create("/api/eb_user/" + createdEntity.getId()))
                .body(createdEntity);
    }

    /**
     * Updates an existing User.
     *
     * @param id         The ID of the entity to update
     * @param requestDTO The updated data
     * @return The updated entity
     */
    @PutMapping("/{id}")
    public ResponseEntity<UserResponseDTO> update(
            @PathVariable UUID id,
            @Valid @RequestBody UserRequestDTO requestDTO) {
        UserResponseDTO updatedEntity = service.update(id, requestDTO);
        return ResponseEntity.ok(updatedEntity);
    }

    /**
     * Retrieves an User by ID.
     *
     * @param id The ID of the entity to retrieve
     * @return The entity, if found
     */
    @GetMapping("/{id}")
    public ResponseEntity<UserResponseDTO> findById(@PathVariable UUID id) {
        return service.findById(id)
                .map(ResponseEntity::ok)
                .orElseThrow(() -> new EntityNotFoundException("User not found with ID: " + id));
    }

    /**
     * Retrieves all User entities with pagination.
     *
     * @param pageable Pagination information
     * @return A page of entities
     */
    @GetMapping
    public ResponseEntity<Page<UserResponseDTO>> findAll(Pageable pageable) {
        return ResponseEntity.ok(service.findAll(pageable));
    }

    /**
     * Deletes an User by ID.
     *
     * @param id The ID of the entity to delete
     * @return No content if successful
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteById(@PathVariable UUID id) {
        boolean deleted = service.deleteById(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            throw new EntityNotFoundException("User not found with ID: " + id);
        }
    }

    /**
     * Searches for User entities.
     *
     * @param search   The search query
     * @param filter   The filter expression
     * @param sort     The sort expression
     * @param pageable Pagination information
     * @return A page of matching entities
     */
    @GetMapping("/search")
    public ResponseEntity<Page<UserResponseDTO>> search(
            @RequestParam(required = false) String search,
            @RequestParam(required = false) String filter,
            @RequestParam(required = false) String sort,
            Pageable pageable) {
        return ResponseEntity.ok(service.search(search, filter, sort, pageable));
    }
}