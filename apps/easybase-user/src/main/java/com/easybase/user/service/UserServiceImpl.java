package com.easybase.user.service;

import com.easybase.user.model.User;
import com.easybase.user.model.UserImpl;
import com.easybase.user.model.enums.UserStatus;
import com.easybase.department.model.Department;
import com.easybase.user.repository.UserRepository;
import com.easybase.user.web.dto.UserRequestDTO;
import com.easybase.user.web.dto.UserResponseDTO;

import com.easybase.core.collection.CollectionService;
import com.easybase.core.sync.SyncService;
import com.easybase.common.exception.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.UUID;
import java.time.Instant;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import com.easybase.department.model.Department;


/**
* Service implementation for User operations.
* Generated by EasyBase Code Generator.
*/
@Service
@Transactional
public class UserServiceImpl implements UserService {

private final UserRepository repository;
private final CollectionService collectionService;
private final SyncService syncService;

@Autowired
public UserServiceImpl(
UserRepository repository,
CollectionService collectionService,
SyncService syncService) {
this.repository = repository;
        this.collectionService = collectionService;
        this.syncService = syncService;
    }

    @Override
    public UserResponseDTO create(UserRequestDTO requestDTO) {
// Create the entity from the request DTO
User entity = new UserImpl();
        updateEntityFromDTO(entity, requestDTO);

        // Save the entity
        User savedEntity = repository.save(entity);

        // Synchronize with Elasticsearch
        syncService.syncRecord("eb_user", savedEntity);

        return convertToResponseDTO(savedEntity);
    }

    @Override
    public UserResponseDTO update(UUID id, UserRequestDTO requestDTO) {
// Find the existing entity
User entity = repository.findById(id)
.orElseThrow(() -> new EntityNotFoundException("User not found with ID: " + id));

// Update the entity from the request DTO
updateEntityFromDTO(entity, requestDTO);

// Save the updated entity
User savedEntity = repository.save(entity);

        // Synchronize with Elasticsearch
        syncService.syncRecord("eb_user", savedEntity);

        return convertToResponseDTO(savedEntity);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<UserResponseDTO> findById(UUID id) {
return repository.findById(id)
.map(this::convertToResponseDTO);
}

    @Override
    @Transactional(readOnly = true)
    public Page<UserResponseDTO> findAll(Pageable pageable) {
return repository.findAll(pageable)
.map(this::convertToResponseDTO);
}

    @Override
    public boolean deleteById(UUID id) {
if (!repository.existsById(id)) {
return false;
}

        repository.deleteById(id);

        // Synchronize deletion with Elasticsearch
        syncService.deleteRecord("eb_user", id.toString());

        return true;
    }

    @Override
    @Transactional(readOnly = true)
    public Page<UserResponseDTO> search(String search, String filter, String sort, Pageable pageable) {
return collectionService.search("eb_user", search, filter, sort, pageable)
.map(this::convertToResponseDTO);
}

    /**
     * Updates an entity from a request DTO.
     *
     * @param entity The entity to update
     * @param dto The DTO containing the updated data
     */
    private void updateEntityFromDTO(User entity, UserRequestDTO dto) {
entity.setEmail(dto.getEmail());
entity.setFirstName(dto.getFirstName());
entity.setLastName(dto.getLastName());
entity.setStatus(dto.getStatus());

        // TODO: Handle department relationship
    }

    /**
     * Converts an entity to a response DTO.
     *
     * @param entity The entity to convert
     * @return The response DTO
     */
    private UserResponseDTO convertToResponseDTO(User entity) {
UserResponseDTO dto = new UserResponseDTO();

        dto.setId(entity.getId());
        dto.setEmail(entity.getEmail());
        dto.setFirstName(entity.getFirstName());
        dto.setLastName(entity.getLastName());
        dto.setStatus(entity.getStatus());

        // TODO: Handle department relationship

        return dto;
    }
}