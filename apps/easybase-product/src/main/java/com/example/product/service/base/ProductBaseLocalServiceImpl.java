package com.example.product.service.base;

import com.example.product.model.Product;
import com.example.product.repository.ProductJpaRepository;
import com.example.product.api.model.dto.ProductDTO;
import com.example.product.api.model.dto.ProductRequestDTO;
import com.example.product.api.model.mapper.ProductMapper;
import com.easybase.core.sync.SyncService;
import com.easybase.common.exception.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.UUID;

/**
 * Base local service implementation for Product.
 * Generated by EasyBase Code Generator.
 */
@Service
@Transactional
public class ProductBaseLocalServiceImpl implements ProductBaseLocalService {

    protected final ProductJpaRepository repository;
    protected final ProductMapper mapper;
    protected final SyncService syncService;

    @Autowired
    public ProductBaseLocalServiceImpl(
            ProductJpaRepository repository,
            ProductMapper mapper,
            SyncService syncService) {
        this.repository = repository;
        this.mapper = mapper;
        this.syncService = syncService;
    }

    @Override
    public ProductDTO create(ProductRequestDTO requestDTO) {
        Product entity = mapper.toEntity(requestDTO);
        entity = repository.save(entity);

// Sync to Elasticsearch
        syncService.syncRecord("eb_product", entity);

        return mapper.toDTO(entity);
    }

    @Override
    public ProductDTO update(java.util.UUID id, ProductRequestDTO requestDTO) {
        Product entity = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Product", id.toString()));

        mapper.updateEntity(entity, requestDTO);
        entity = repository.save(entity);

// Sync to Elasticsearch
        syncService.syncRecord("eb_product", entity);

        return mapper.toDTO(entity);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<ProductDTO> findById(java.util.UUID id) {
        return repository.findByIdActive(id)
                .map(mapper::toDTO);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> findAll(Pageable pageable) {
        return repository.findAllActive()
                .stream()
                .map(mapper::toDTO)
                .collect(Collectors.collectingAndThen(
                        Collectors.toList(),
                        list -> new org.springframework.data.domain.PageImpl<>(list, pageable, list.size())
                ));
    }

    @Override
    public boolean delete(java.util.UUID id) {
        Product entity = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Product", id.toString()));

        entity.setDeleted(true);
        repository.save(entity);

        // Sync to Elasticsearch
        syncService.syncRecord("eb_product", entity);

        return true;
    }

    @Override
    public boolean hardDelete(java.util.UUID id) {
        if (!repository.existsById(id)) {
            return false;
        }

        repository.deleteById(id);

        // Sync deletion to Elasticsearch
        syncService.deleteRecord("eb_product", id.toString());

        return true;
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> search(String search, String filter, String sort, Pageable pageable) {
        // Implement search using SyncService and SearchUtil
        // This will require integration with the core search services
        throw new UnsupportedOperationException("Search not implemented yet");
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<ProductDTO> findBySku(String sku) {
        // CUSTOM CODE START: findBySku
        // Implement the finder method
        throw new UnsupportedOperationException("findBySku not implemented yet");
        // CUSTOM CODE END: findBySku
    }

    @Override
    @Transactional(readOnly = true)
    public List<ProductDTO> findByNameContaining(String name) {
        // CUSTOM CODE START: findByNameContaining
        // Implement the finder method
        throw new UnsupportedOperationException("findByNameContaining not implemented yet");
        // CUSTOM CODE END: findByNameContaining
    }

    @Override
    @Transactional(readOnly = true)
    public List<ProductDTO> findByPriceRange(Double minPrice, Double maxPrice) {
        // CUSTOM CODE START: findByPriceRange
        // Implement the finder method
        throw new UnsupportedOperationException("findByPriceRange not implemented yet");
        // CUSTOM CODE END: findByPriceRange
    }

    /**
     * Validates a request DTO.
     *
     * @param requestDTO the request DTO
     * @throws IllegalArgumentException if validation fails
     */
    protected void validateRequestDTO(ProductRequestDTO requestDTO) {
        // CUSTOM CODE START: validateRequestDTO
        // Add validation logic
        // CUSTOM CODE END: validateRequestDTO
    }
}