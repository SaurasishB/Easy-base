package com.example.product.service.base;

import com.example.product.api.model.dto.ProductDTO;
import com.example.product.api.model.dto.ProductRequestDTO;
import com.easybase.common.exception.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
    import java.util.UUID;

/**
* Base service implementation for Product.
* Generated by EasyBase Code Generator.
*/
@Service
@Transactional
public class ProductBaseServiceImpl implements ProductBaseService {

protected final ProductLocalService localService;

@Autowired
public ProductBaseServiceImpl(ProductLocalService localService) {
this.localService = localService;
}

@Override
public ProductDTO create(ProductRequestDTO requestDTO) {
// Pre-processing, security checks, etc.
return localService.create(requestDTO);
}

@Override
public ProductDTO update(java.util.UUID id, ProductRequestDTO requestDTO) {
// Pre-processing, security checks, etc.
return localService.update(id, requestDTO);
}

@Override
@Transactional(readOnly = true)
public ProductDTO findById(java.util.UUID id) {
return localService.findById(id)
.orElseThrow(() -> new EntityNotFoundException("Product", id.toString()));
}

@Override
@Transactional(readOnly = true)
public Page<ProductDTO> findAll(Pageable pageable) {
    return localService.findAll(pageable);
    }

    @Override
    public void delete(java.util.UUID id) {
    if (!localService.delete(id)) {
    throw new EntityNotFoundException("Product", id.toString());
    }
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> search(String search, String filter, String sort, Pageable pageable) {
        return localService.search(search, filter, sort, pageable);
        }
        }