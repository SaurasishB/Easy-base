package com.example.product.api.base;

import com.example.product.service.ProductService;
import com.example.product.api.model.dto.ProductDTO;
import com.example.product.api.model.dto.ProductRequestDTO;
import com.example.product.api.model.dto.ProductResponseDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.net.URI;
    import java.util.UUID;

/**
* Base controller for Product.
* Generated by EasyBase Code Generator.
*/
public class ProductBaseController {

protected final ProductService service;

@Autowired
public ProductBaseController(ProductService service) {
this.service = service;
}

/**
* Creates a new Product.
*
* @param requestDTO the request DTO
* @return the created entity
*/
@PostMapping
public ResponseEntity<ProductResponseDTO> create(@Valid @RequestBody ProductRequestDTO requestDTO) {
    ProductDTO dto = service.create(requestDTO);
    return ResponseEntity
    .created(URI.create("/product/" + dto.getId()))
    .body(convertToResponseDTO(dto));
    }

    /**
    * Updates an existing Product.
    *
    * @param id the ID
    * @param requestDTO the request DTO
    * @return the updated entity
    */
    @PutMapping("/{id}")
    public ResponseEntity<ProductResponseDTO> update(
        @PathVariable java.util.UUID id,
        @Valid @RequestBody ProductRequestDTO requestDTO) {
        ProductDTO dto = service.update(id, requestDTO);
        return ResponseEntity.ok(convertToResponseDTO(dto));
        }

        /**
        * Retrieves a Product by ID.
        *
        * @param id the ID
        * @return the entity
        */
        @GetMapping("/{id}")
        public ResponseEntity<ProductResponseDTO> findById(@PathVariable java.util.UUID id) {
            ProductDTO dto = service.findById(id);
            return ResponseEntity.ok(convertToResponseDTO(dto));
            }

            /**
            * Retrieves all Product entities with pagination.
            *
            * @param pageable the pagination information
            * @return a page of entities
            */
            @GetMapping
            public ResponseEntity<Page<ProductResponseDTO>> findAll(Pageable pageable) {
                Page<ProductDTO> dtoPage = service.findAll(pageable);
                    Page<ProductResponseDTO> responsePage = dtoPage.map(this::convertToResponseDTO);
                        return ResponseEntity.ok(responsePage);
                        }

                        /**
                        * Deletes a Product by ID.
                        *
                        * @param id the ID
                        * @return no content
                        */
                        @DeleteMapping("/{id}")
                        public ResponseEntity<Void> delete(@PathVariable java.util.UUID id) {
                            service.delete(id);
                            return ResponseEntity.noContent().build();
                            }

                            /**
                            * Searches for Product entities.
                            *
                            * @param search the search query
                            * @param filter the filter query
                            * @param sort the sort expression
                            * @param pageable the pagination information
                            * @return a page of entities
                            */
                            @GetMapping("/search")
                            public ResponseEntity<Page<ProductResponseDTO>> search(
                                @RequestParam(required = false) String search,
                                @RequestParam(required = false) String filter,
                                @RequestParam(required = false) String sort,
                                Pageable pageable) {
                                Page<ProductDTO> dtoPage = service.search(search, filter, sort, pageable);
                                    Page<ProductResponseDTO> responsePage = dtoPage.map(this::convertToResponseDTO);
                                        return ResponseEntity.ok(responsePage);
                                        }

                                        /**
                                        * Converts a DTO to a response DTO.
                                        *
                                        * @param dto the DTO
                                        * @return the response DTO
                                        */
                                        protected ProductResponseDTO convertToResponseDTO(ProductDTO dto) {
                                        if (dto == null) {
                                        return null;
                                        }

                                        ProductResponseDTO responseDTO = new ProductResponseDTO();

                                                responseDTO.setId(dto.getId());
                                                responseDTO.setName(dto.getName());
                                                responseDTO.setDescription(dto.getDescription());
                                                responseDTO.setPrice(dto.getPrice());
                                                responseDTO.setSku(dto.getSku());
                                                responseDTO.setStatus(dto.getStatus());

                                            responseDTO.setCreatedDate(dto.getCreatedDate());
                                            responseDTO.setLastModifiedDate(dto.getLastModifiedDate());
                                                responseDTO.setCreatedBy(dto.getCreatedBy());

                                        // CUSTOM CODE START: customizeResponseDTO
                                        // Customize response DTO here
                                        // CUSTOM CODE END: customizeResponseDTO

                                        return responseDTO;
                                        }
                                        }