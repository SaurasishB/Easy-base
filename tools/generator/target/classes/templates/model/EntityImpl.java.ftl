package ${entity.packageName}.model;

<#list entity.requiredImports as import>
import ${import};
</#list>
<#-- Import enums -->
<#list entity.fields as field>
<#if field.isEnum()>
import ${entity.packageName}.model.enums.${field.enumClass};
</#if>
</#list>
<#-- Import related entities from other modules -->
<#list entity.fields as field>
<#if field.isRelationship() && field.targetPackage??>
import ${field.targetPackage}.${field.target};
</#if>
</#list>
import jakarta.persistence.*;
import java.util.Objects;

/**
* JPA entity implementation for ${entity.entity}.
* Generated by EasyBase Code Generator.
*/
@Entity
@Table(name = "${entity.table}")
public class ${entity.entity}Impl implements ${entity.entity} {
<#-- Field declarations -->
<#list entity.fields as field>
<#if field.primaryKey>
@Id
<#if field.generated>
@GeneratedValue(strategy = GenerationType.AUTO)
    </#if>
    </#if>
    <#if field.validation?has_content>
    <#list field.validation as validation>
    @${validation.type}<#if validation.message??>
    (message = "${validation.message}")
    </#if>
    </#list>
    </#if>
    <#if field.isRelationship()>
    @${field.relationType}
    <#if field.joinColumn??>
    @JoinColumn(name = "${field.joinColumn}")
    </#if>
    private ${field.target} ${field.name};
    <#elseif field.isEnum()>
    @Enumerated(EnumType.STRING)
    @Column(name = "${field.name}"<#if !field.nullable>, nullable = false</#if>)
    private ${field.enumClass} ${field.name}<#if field.defaultValue??> = ${field.defaultValue}</#if>;
    <#else>
    @Column(name = "${field.name}"<#if !field.nullable>, nullable = false</#if><#if field.length??>, length = ${field.length}</#if>)
    private ${field.javaType} ${field.name}<#if field.defaultValue??> = ${field.defaultValue}</#if>;
    </#if>

    </#list>
    <#-- Default constructor -->
    public ${entity.entity}Impl() {
    // Default constructor required by JPA
    }

    <#-- Getters and Setters -->
    <#list entity.fields as field>
    @Override
    public ${field.isEnum()?then(field.enumClass, field.isRelationship()?then(field.target, field.javaType))} get${field.name?cap_first}() {
        return ${field.name};
    }

    @Override
    public void set${field.name?cap_first}(${field.isEnum()?then(field.enumClass, field.isRelationship()?then(field.target, field.javaType))} ${field.name}) {
        this.${field.name} = ${field.name};
    }

    </#list>
    <#-- equals, hashCode, and toString -->
    @Override
    public boolean equals(Object o) {
if (this == o) return true;
if (o == null || getClass() != o.getClass()) return false;
${entity.entity}Impl entity = (${entity.entity}Impl) o;
        return Objects.equals(${entity.getPrimaryKeyField().name}, entity.${entity.getPrimaryKeyField().name});
    }

    @Override
    public int hashCode() {
        return Objects.hash(${entity.getPrimaryKeyField().name});
    }

    @Override
    public String toString() {
return "${entity.entity}{" +
"${entity.getPrimaryKeyField().name}=" + ${entity.getPrimaryKeyField().name} +
                <#list entity.fields as field>
                <#if !field.isPrimaryKey() && !field.isRelationship()>
                ", ${field.name}=" + ${field.name} +
                </#if>
                </#list>
                '}';
    }
}