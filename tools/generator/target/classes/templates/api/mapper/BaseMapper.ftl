package ${entity.baseComponentPackage("api")}.model.mapper;

import ${entity.componentPackage("model")}.${entity.name};
import ${entity.componentPackage("api")}.model.dto.*;
import org.springframework.stereotype.Component;
<#assign primaryKey = entity.primaryKey>
<#if primaryKey?has_content>
    import ${primaryKey.get().javaType};
</#if>

/**
* Base mapper for ${entity.name}.
* Generated by EasyBase Code Generator.
*/
@Component
public class ${entity.name}BaseMapper {

/**
* Converts an entity to a DTO.
*
* @param entity the entity
* @return the DTO
*/
public ${entity.name}DTO toDTO(${entity.name} entity) {
if (entity == null) {
return null;
}

${entity.name}DTO dto = new ${entity.name}DTO();
<#list entity.fields as field>
    <#if field.primaryKey>
        dto.setId(entity.get${field.name?cap_first}());
    <#elseif !field.name?starts_with("_")>
        dto.set${field.name?cap_first}(entity.get${field.name?cap_first}());
    </#if>
</#list>

<#if entity.auditConfig.enabled>
    dto.setCreatedDate(entity.getCreatedDate());
    dto.setLastModifiedDate(entity.getLastModifiedDate());
    <#if entity.auditConfig.hasField("createdBy")>
        dto.setCreatedBy(entity.getCreatedBy());
    </#if>
    <#if entity.auditConfig.hasField("lastModifiedBy")>
        dto.setLastModifiedBy(entity.getLastModifiedBy());
    </#if>
</#if>

return dto;
}

/**
* Converts an entity to a response DTO.
*
* @param entity the entity
* @return the response DTO
*/
public ${entity.name}ResponseDTO toResponseDTO(${entity.name} entity) {
if (entity == null) {
return null;
}

${entity.name}ResponseDTO dto = new ${entity.name}ResponseDTO();
<#list entity.fields as field>
    <#if field.primaryKey>
        dto.setId(entity.get${field.name?cap_first}());
    <#elseif !field.name?starts_with("_")>
        dto.set${field.name?cap_first}(entity.get${field.name?cap_first}());
    </#if>
</#list>

<#if entity.auditConfig.enabled>
    dto.setCreatedDate(entity.getCreatedDate());
    dto.setLastModifiedDate(entity.getLastModifiedDate());
    <#if entity.auditConfig.hasField("createdBy")>
        dto.setCreatedBy(entity.getCreatedBy());
    </#if>
    <#if entity.auditConfig.hasField("lastModifiedBy")>
        dto.setLastModifiedBy(entity.getLastModifiedBy());
    </#if>
</#if>

return dto;
}

/**
* Converts a request DTO to an entity.
*
* @param requestDTO the request DTO
* @return the entity
*/
public ${entity.name} toEntity(${entity.name}RequestDTO requestDTO) {
if (requestDTO == null) {
return null;
}

${entity.name} entity = new ${entity.name}();
updateEntity(entity, requestDTO);

return entity;
}

/**
* Updates an entity from a request DTO.
*
* @param entity the entity to update
* @param requestDTO the request DTO with updated data
*/
public void updateEntity(${entity.name} entity, ${entity.name}RequestDTO requestDTO) {
if (entity == null || requestDTO == null) {
return;
}

<#list entity.fields as field>
    <#if !field.primaryKey && !field.name?starts_with("_")>
        entity.set${field.name?cap_first}(requestDTO.get${field.name?cap_first}());
    </#if>
</#list>
}

<#list entity.dtoLevels as dtoLevel>
    <#if dtoLevel.name != "Basic">
        /**
        * Converts an entity to a ${dtoLevel.name} DTO.
        *
        * @param entity the entity
        * @return the ${dtoLevel.name} DTO
        */
        public ${dtoLevel.getDtoClassName(entity.name)} to${dtoLevel.name}DTO(${entity.name} entity) {
        if (entity == null) {
        return null;
        }

        ${dtoLevel.getDtoClassName(entity.name)} dto = new ${dtoLevel.getDtoClassName(entity.name)}();
        <#list entity.fields as field>
            <#if dtoLevel.includesField(field.name) || field.primaryKey>
                <#if field.primaryKey>
                    dto.setId(entity.get${field.name?cap_first}());
                <#elseif !field.name?starts_with("_")>
                    dto.set${field.name?cap_first}(entity.get${field.name?cap_first}());
                </#if>
            </#if>
        </#list>

        <#if entity.auditConfig.enabled>
            <#list entity.auditConfig.fields as auditField>
                <#if dtoLevel.includesField(auditField)>
                    <#if auditField == "createdDate">
                        dto.setCreatedDate(entity.getCreatedDate());
                    <#elseif auditField == "lastModifiedDate">
                        dto.setLastModifiedDate(entity.getLastModifiedDate());
                    <#elseif auditField == "createdBy">
                        dto.setCreatedBy(entity.getCreatedBy());
                    <#elseif auditField == "lastModifiedBy">
                        dto.setLastModifiedBy(entity.getLastModifiedBy());
                    </#if>
                </#if>
            </#list>
        </#if>

        return dto;
        }
    </#if>
</#list>
}