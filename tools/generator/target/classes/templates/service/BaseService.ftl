package ${entity.baseComponentPackage("service")};

import ${entity.componentPackage("api")}.model.dto.${entity.name}DTO;
import ${entity.componentPackage("api")}.model.dto.${entity.name}RequestDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
import java.util.Optional;
<#assign primaryKey = entity.primaryKey>
<#if primaryKey?has_content>
    import ${primaryKey.get().javaType};
</#if>

/**
* Base service interface for ${entity.name}.
* Generated by EasyBase Code Generator.
*/
public interface ${entity.name}BaseService {
/**
* Creates a new ${entity.name}.
*
* @param requestDTO the request DTO
* @return the created DTO
*/
${entity.name}DTO create(${entity.name}RequestDTO requestDTO);

/**
* Updates an existing ${entity.name}.
*
* @param id the ID
* @param requestDTO the request DTO
* @return the updated DTO
*/
${entity.name}DTO update(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id, ${entity.name}RequestDTO requestDTO);

/**
* Retrieves a ${entity.name} by ID.
*
* @param id the ID
* @return the DTO, if found
*/
${entity.name}DTO findById(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id);

/**
* Retrieves all ${entity.name} entities with pagination.
*
* @param pageable the pagination information
* @return a page of DTOs
*/
Page<${entity.name}DTO> findAll(Pageable pageable);

    /**
    * Deletes a ${entity.name} by ID.
    *
    * @param id the ID
    */
    void delete(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id);

    /**
    * Searches for ${entity.name} entities.
    *
    * @param search the search query
    * @param filter the filter query
    * @param sort the sort expression
    * @param pageable the pagination information
    * @return a page of DTOs
    */
    Page<${entity.name}DTO> search(String search, String filter, String sort, Pageable pageable);
        }