package ${entity.baseComponentPackage("service")};

import ${entity.componentPackage("api")}.model.dto.${entity.name}DTO;
import ${entity.componentPackage("api")}.model.dto.${entity.name}RequestDTO;
import com.easybase.common.exception.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
<#assign primaryKey = entity.primaryKey>
<#if primaryKey?has_content>
    import ${primaryKey.get().javaType};
</#if>

/**
* Base service implementation for ${entity.name}.
* Generated by EasyBase Code Generator.
*/
@Service
@Transactional
public class ${entity.name}BaseServiceImpl implements ${entity.name}BaseService {

protected final ${entity.name}LocalService localService;

@Autowired
public ${entity.name}BaseServiceImpl(${entity.name}LocalService localService) {
this.localService = localService;
}

@Override
public ${entity.name}DTO create(${entity.name}RequestDTO requestDTO) {
// Pre-processing, security checks, etc.
return localService.create(requestDTO);
}

@Override
public ${entity.name}DTO update(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id, ${entity.name}RequestDTO requestDTO) {
// Pre-processing, security checks, etc.
return localService.update(id, requestDTO);
}

@Override
@Transactional(readOnly = true)
public ${entity.name}DTO findById(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id) {
return localService.findById(id)
.orElseThrow(() -> new EntityNotFoundException("${entity.name}", id.toString()));
}

@Override
@Transactional(readOnly = true)
public Page<${entity.name}DTO> findAll(Pageable pageable) {
    return localService.findAll(pageable);
    }

    @Override
    public void delete(<#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id) {
    if (!localService.delete(id)) {
    throw new EntityNotFoundException("${entity.name}", id.toString());
    }
    }

    @Override
    @Transactional(readOnly = true)
    public Page<${entity.name}DTO> search(String search, String filter, String sort, Pageable pageable) {
        return localService.search(search, filter, sort, pageable);
        }
        }