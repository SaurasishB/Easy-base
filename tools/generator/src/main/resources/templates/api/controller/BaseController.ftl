package ${entity.baseComponentPackage("api")};

import ${entity.componentPackage("service")}.${entity.name}Service;
import ${entity.componentPackage("api")}.model.dto.${entity.name}DTO;
import ${entity.componentPackage("api")}.model.dto.${entity.name}RequestDTO;
import ${entity.componentPackage("api")}.model.dto.${entity.name}ResponseDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.net.URI;
<#assign primaryKey = entity.primaryKey>
<#if primaryKey?has_content>
    import ${primaryKey.get().javaType};
</#if>

/**
* Base controller for ${entity.name}.
* Generated by EasyBase Code Generator.
*/
public class ${entity.name}BaseController {

protected final ${entity.name}Service service;

@Autowired
public ${entity.name}BaseController(${entity.name}Service service) {
this.service = service;
}

/**
* Creates a new ${entity.name}.
*
* @param requestDTO the request DTO
* @return the created entity
*/
@PostMapping
public ResponseEntity<${entity.name}ResponseDTO> create(@Valid @RequestBody ${entity.name}RequestDTO requestDTO) {
    ${entity.name}DTO dto = service.create(requestDTO);
    return ResponseEntity
    .created(URI.create("/${entity.name?lower_case}/" + dto.getId()))
    .body(convertToResponseDTO(dto));
    }

    /**
    * Updates an existing ${entity.name}.
    *
    * @param id the ID
    * @param requestDTO the request DTO
    * @return the updated entity
    */
    @PutMapping("/{id}")
    public ResponseEntity<${entity.name}ResponseDTO> update(
        @PathVariable <#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id,
        @Valid @RequestBody ${entity.name}RequestDTO requestDTO) {
        ${entity.name}DTO dto = service.update(id, requestDTO);
        return ResponseEntity.ok(convertToResponseDTO(dto));
        }

        /**
        * Retrieves a ${entity.name} by ID.
        *
        * @param id the ID
        * @return the entity
        */
        @GetMapping("/{id}")
        public ResponseEntity<${entity.name}ResponseDTO> findById(@PathVariable <#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id) {
            ${entity.name}DTO dto = service.findById(id);
            return ResponseEntity.ok(convertToResponseDTO(dto));
            }

            /**
            * Retrieves all ${entity.name} entities with pagination.
            *
            * @param pageable the pagination information
            * @return a page of entities
            */
            @GetMapping
            public ResponseEntity<Page<${entity.name}ResponseDTO>> findAll(Pageable pageable) {
                Page<${entity.name}DTO> dtoPage = service.findAll(pageable);
                    Page<${entity.name}ResponseDTO> responsePage = dtoPage.map(this::convertToResponseDTO);
                        return ResponseEntity.ok(responsePage);
                        }

                        /**
                        * Deletes a ${entity.name} by ID.
                        *
                        * @param id the ID
                        * @return no content
                        */
                        @DeleteMapping("/{id}")
                        public ResponseEntity<Void> delete(@PathVariable <#if primaryKey?has_content>${primaryKey.get().javaType}<#else>Long</#if> id) {
                            service.delete(id);
                            return ResponseEntity.noContent().build();
                            }

                            /**
                            * Searches for ${entity.name} entities.
                            *
                            * @param search the search query
                            * @param filter the filter query
                            * @param sort the sort expression
                            * @param pageable the pagination information
                            * @return a page of entities
                            */
                            @GetMapping("/search")
                            public ResponseEntity<Page<${entity.name}ResponseDTO>> search(
                                @RequestParam(required = false) String search,
                                @RequestParam(required = false) String filter,
                                @RequestParam(required = false) String sort,
                                Pageable pageable) {
                                Page<${entity.name}DTO> dtoPage = service.search(search, filter, sort, pageable);
                                    Page<${entity.name}ResponseDTO> responsePage = dtoPage.map(this::convertToResponseDTO);
                                        return ResponseEntity.ok(responsePage);
                                        }

                                        /**
                                        * Converts a DTO to a response DTO.
                                        *
                                        * @param dto the DTO
                                        * @return the response DTO
                                        */
                                        protected ${entity.name}ResponseDTO convertToResponseDTO(${entity.name}DTO dto) {
                                        if (dto == null) {
                                        return null;
                                        }

                                        ${entity.name}ResponseDTO responseDTO = new ${entity.name}ResponseDTO();

                                        <#list entity.fields as field>
                                            <#if field.primaryKey>
                                                responseDTO.setId(dto.getId());
                                            <#elseif !field.name?starts_with("_")>
                                                responseDTO.set${field.name?cap_first}(dto.get${field.name?cap_first}());
                                            </#if>
                                        </#list>

                                        <#if entity.auditConfig.enabled>
                                            responseDTO.setCreatedDate(dto.getCreatedDate());
                                            responseDTO.setLastModifiedDate(dto.getLastModifiedDate());
                                            <#if entity.auditConfig.hasField("createdBy")>
                                                responseDTO.setCreatedBy(dto.getCreatedBy());
                                            </#if>
                                            <#if entity.auditConfig.hasField("lastModifiedBy")>
                                                responseDTO.setLastModifiedBy(dto.getLastModifiedBy());
                                            </#if>
                                        </#if>

                                        // CUSTOM CODE START: customizeResponseDTO
                                        // Customize response DTO here
                                        // CUSTOM CODE END: customizeResponseDTO

                                        return responseDTO;
                                        }
                                        }