package ${entity.packageName}.service;

import ${entity.packageName}.model.${entity.entity};
import ${entity.packageName}.web.dto.${entity.entity}RequestDTO;
import ${entity.packageName}.web.dto.${entity.entity}ResponseDTO;

import java.util.List;
import java.util.Optional;
<#-- Import enums -->
<#list entity.fields as field>
<#if field.isEnum()>
import ${entity.packageName}.model.enums.${field.enumClass};
</#if>
</#list>
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
<#list entity.requiredImports as import>
import ${import};
</#list>

/**
* Service interface for ${entity.entity} operations.
* Generated by EasyBase Code Generator.
*/
public interface ${entity.entity}Service {

/**
* Creates a new ${entity.entity}.
*
* @param requestDTO The data for the new entity
* @return The created entity
*/
${entity.entity}ResponseDTO create(${entity.entity}RequestDTO requestDTO);

/**
* Updates an existing ${entity.entity}.
*
* @param id The ID of the entity to update
* @param requestDTO The updated data
* @return The updated entity
*/
${entity.entity}ResponseDTO update(${entity.getPrimaryKeyField().javaType} id, ${entity.entity}RequestDTO requestDTO);

/**
* Retrieves an ${entity.entity} by ID.
*
* @param id The ID of the entity to retrieve
* @return The entity, if found
*/
Optional<${entity.entity}ResponseDTO> findById(${entity.getPrimaryKeyField().javaType} id);

/**
* Retrieves all ${entity.entity} entities with pagination.
*
* @param pageable Pagination information
* @return A page of entities
*/
Page<${entity.entity}ResponseDTO> findAll(Pageable pageable);

/**
* Deletes an ${entity.entity} by ID.
*
* @param id The ID of the entity to delete
* @return True if the entity was deleted, false otherwise
*/
boolean deleteById(${entity.getPrimaryKeyField().javaType} id);

/**
* Searches for ${entity.entity} entities.
*
* @param search The search query
* @param filter The filter expression
* @param sort The sort expression
* @param pageable Pagination information
* @return A page of matching entities
*/
Page<${entity.entity}ResponseDTO> search(String search, String filter, String sort, Pageable pageable);
}