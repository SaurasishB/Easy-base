package ${entity.packageName}.web;

import ${entity.packageName}.service.${entity.entity}Service;
import ${entity.packageName}.web.dto.${entity.entity}RequestDTO;
import ${entity.packageName}.web.dto.${entity.entity}ResponseDTO;

import com.easybase.common.exception.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.net.URI;
<#list entity.requiredImports as import>
import ${import};
</#list>

/**
* REST Controller for ${entity.entity} operations.
* Generated by EasyBase Code Generator.
*/
@RestController
@RequestMapping("/api/${entity.table}")
public class ${entity.entity}Controller {

private final ${entity.entity}Service service;

@Autowired
public ${entity.entity}Controller(${entity.entity}Service service) {
this.service = service;
    }

    /**
     * Creates a new ${entity.entity}.
     *
     * @param requestDTO The data for the new entity
     * @return The created entity
     */
    @PostMapping
    public ResponseEntity<${entity.entity}ResponseDTO> create(@Valid @RequestBody ${entity.entity}RequestDTO requestDTO) {
        ${entity.entity}ResponseDTO createdEntity = service.create(requestDTO);
                return ResponseEntity
        .created(URI.create("/api/${entity.table}/" + createdEntity.get${entity.getPrimaryKeyField().name?cap_first}()))
        .body(createdEntity);
    }

    /**
    * Updates an existing ${entity.entity}.
    *
    * @param id The ID of the entity to update
    * @param requestDTO The updated data
    * @return The updated entity
    */
    @PutMapping("/{id}")
    public ResponseEntity<${entity.entity}ResponseDTO> update(
    @PathVariable ${entity.getPrimaryKeyField().javaType} id,
    @Valid @RequestBody ${entity.entity}RequestDTO requestDTO) {
        ${entity.entity}ResponseDTO updatedEntity = service.update(id, requestDTO);
        return ResponseEntity.ok(updatedEntity);
    }

    /**
     * Retrieves an ${entity.entity} by ID.
     *
     * @param id The ID of the entity to retrieve
     * @return The entity, if found
     */
    @GetMapping("/{id}")
    public ResponseEntity<${entity.entity}ResponseDTO> findById(@PathVariable ${entity.getPrimaryKeyField().javaType} id) {
        return service.findById(id)
        .map(ResponseEntity::ok)
        .orElseThrow(() -> new EntityNotFoundException("${entity.entity} not found with ID: " + id));
    }

    /**
    * Retrieves all ${entity.entity} entities with pagination.
    *
    * @param pageable Pagination information
    * @return A page of entities
    */
    @GetMapping
    public ResponseEntity<Page<${entity.entity}ResponseDTO>> findAll(Pageable pageable) {
        return ResponseEntity.ok(service.findAll(pageable));
    }

    /**
    * Deletes an ${entity.entity} by ID.
    *
    * @param id The ID of the entity to delete
    * @return No content if successful
    */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteById(@PathVariable ${entity.getPrimaryKeyField().javaType} id) {
        boolean deleted = service.deleteById(id);
        if (deleted) {
            return ResponseEntity.noContent().build();
        } else {
            throw new EntityNotFoundException("${entity.entity} not found with ID: " + id);
        }
    }

    /**
    * Searches for ${entity.entity} entities.
    *
    * @param search The search query
    * @param filter The filter expression
    * @param sort The sort expression
    * @param pageable Pagination information
    * @return A page of matching entities
    */
    @GetMapping("/search")
    public ResponseEntity<Page<${entity.entity}ResponseDTO>> search(
    @RequestParam(required = false) String search,
    @RequestParam(required = false) String filter,
    @RequestParam(required = false) String sort,
    Pageable pageable) {
        return ResponseEntity.ok(service.search(search, filter, sort, pageable));
    }
}